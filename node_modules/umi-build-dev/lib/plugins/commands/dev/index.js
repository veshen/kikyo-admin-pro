"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _chalk = _interopRequireDefault(require("chalk"));

var _createRouteMiddleware = _interopRequireDefault(require("./createRouteMiddleware"));

var _watch = require("../../../getConfig/watch");

var _getRouteManager = _interopRequireDefault(require("../getRouteManager"));

var _getFilesGenerator = _interopRequireDefault(require("../getFilesGenerator"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(api) {
  const service = api.service,
        config = api.config;
  const cwd = service.cwd;
  api.registerCommand('dev', {
    webpack: true,
    description: 'start a dev server for development'
  }, (args = {}) => {
    const RoutesManager = (0, _getRouteManager.default)(service);
    RoutesManager.fetchRoutes();
    const port = args.port;
    process.env.NODE_ENV = 'development';
    service.applyPlugins('onStart');
    const filesGenerator = (0, _getFilesGenerator.default)(service, {
      RoutesManager,
      mountElementId: config.mountElementId
    });
    filesGenerator.generate();
    let server = null; // Add more service methods.

    service.restart = why => {
      if (!server) return;

      if (why) {
        console.log(_chalk.default.green(`Since ${why}, try to restart server`));
      } else {
        console.log(_chalk.default.green(`Try to restart server`));
      }

      (0, _watch.unwatch)();
      filesGenerator.unwatch();
      server.close();
      process.send({
        type: 'RESTART'
      });
    };

    service.refreshBrowser = () => {
      if (!server) return;
      server.sockWrite(server.sockets, 'content-changed');
    };

    service.printError = messages => {
      if (!server) return;
      messages = typeof messages === 'string' ? [messages] : messages;
      server.sockWrite(server.sockets, 'errors', messages);
    };

    service.printWarn = messages => {
      if (!server) return;
      messages = typeof messages === 'string' ? [messages] : messages;
      server.sockWrite(server.sockets, 'warns', messages);
    };

    service.rebuildTmpFiles = () => {
      filesGenerator.rebuild();
    };

    service.rebuildHTML = () => {
      // Currently, refresh browser will get new HTML.
      service.applyPlugins('onHTMLRebuild');
      service.refreshBrowser();
    };

    function startWatch() {
      filesGenerator.watch();
      service.userConfig.setConfig(service.config);
      service.userConfig.watchWithDevServer();
    }

    service._applyPluginsAsync('_beforeDevServerAsync').then(() => {
      require('af-webpack/dev').default({
        cwd,
        port,
        base: service.config.base,
        webpackConfig: service.webpackConfig,
        proxy: service.config.proxy || {},
        contentBase: './path-do-not-exists',

        _beforeServerWithApp(app) {
          // @private
          service.applyPlugins('_beforeServerWithApp', {
            args: {
              app
            }
          });
        },

        beforeMiddlewares: service.applyPlugins('addMiddlewareAhead', {
          initialValue: []
        }),
        afterMiddlewares: service.applyPlugins('addMiddleware', {
          initialValue: [(0, _createRouteMiddleware.default)(service)]
        }),

        beforeServer(devServer) {
          server = devServer;
          service.applyPlugins('beforeDevServer', {
            args: {
              server: devServer
            }
          });
        },

        afterServer(devServer) {
          service.applyPlugins('afterDevServer', {
            args: {
              server: devServer
            }
          });
          startWatch();
        },

        onCompileDone({
          isFirstCompile,
          stats
        }) {
          service.applyPlugins('onDevCompileDone', {
            args: {
              isFirstCompile,
              stats
            }
          });
        }

      });
    }).catch(e => {
      console.error(_chalk.default.red(e));
    });
  });
}
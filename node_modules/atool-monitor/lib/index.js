'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reportBuildData = exports.reportData = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _urllib = require('urllib');

var _urllib2 = _interopRequireDefault(_urllib);

var _isAliEnv2 = require('is-ali-env');

var _isAliEnv3 = _interopRequireDefault(_isAliEnv2);

var _isGitRepository = require('is-git-repository');

var _isGitRepository2 = _interopRequireDefault(_isGitRepository);

var _os = require('os');

var _path = require('path');

var _fs = require('fs');

var _v = require('uuid/v1');

var _v2 = _interopRequireDefault(_v);

var _jsonfileUpdater = require('jsonfile-updater');

var _jsonfileUpdater2 = _interopRequireDefault(_jsonfileUpdater);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cwd = '';
var reportFrom = '';

var appURL = 'http://10.244.30.23:7001/monitor/apps';
var devURL = 'http://10.244.30.23:7001/monitor/devs';
var buildURL = 'http://10.244.30.23:7001/monitor/builds';
var version = require('../package.json').version;
var exec = require('child_process').execSync;

// 获取安装的真实版本
function getRealVersion(moduleName) {
  var version = '';
  try {
    var pkgFile = (0, _path.join)(cwd, 'node_modules', moduleName, 'package.json');
    version = require(pkgFile).version;
  } catch (e) {}

  return version;
}

function getPkgJSON() {
  var getRealPkgVersion = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  // 默认返回未经修改的 package.json
  var ret = {};
  try {
    ret = JSON.parse((0, _fs.readFileSync)((0, _path.join)(cwd, 'package.json'), 'utf-8'));
  } catch (e) {}
  if (getRealPkgVersion) {
    // 返回真实版本的 package.json
    ['dependencies', 'devDependencies'].map(function (deps) {
      if (ret[deps]) {
        Object.keys(ret[deps]).map(function (key) {
          var realVersion = getRealVersion(key);
          if (realVersion) {
            ret[deps][key] = realVersion;
          }
        });
      }
    });
  }

  return ret;
}

function getGitConfig() {
  var gitUserName = '';
  var gitUserEmail = '';
  try {
    gitUserName = exec('git config --get user.name').toString().trim();
    gitUserEmail = exec('git config --get user.email').toString().trim();
  } catch (e) {
    if (reportFrom === 'bigfish') {
      console.log('[bigfish] not find git user info.');
    }
  }
  return { gitUserName: gitUserName, gitUserEmail: gitUserEmail };
}

function getGitUerInfo() {
  var skip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

  var gitUserName = '';
  var gitUserEmail = '';
  if ((0, _isGitRepository2.default)()) {
    // 判断是否为 git 项目
    try {
      gitUserName = exec('git --no-pager log --pretty=format:"%an" -n1' + ' --skip=' + skip).toString().trim();
      gitUserEmail = exec('git --no-pager log --pretty=format:"%ae" -n1' + ' --skip=' + skip).toString().trim();
    } catch (e) {}
    if (gitUserName && gitUserName !== 'myscm' && gitUserName !== 'ant-ued') {
      return { gitUserName: gitUserName, gitUserEmail: gitUserEmail };
    } else if (!gitUserName) {
      return getGitConfig();
    } else {
      skip += 1;
      return getGitUerInfo(skip);
    }
  } else {
    // 非 git 项目
    return getGitConfig();
  }
}

function getGitInfo() {
  var gitRepo = '';
  try {
    gitRepo = exec('git config --get remote.origin.url').toString().trim();
  } catch (e) {
    if (reportFrom === 'bigfish') {
      console.log('[bigfish] not find git repository.');
    }
  }
  return _extends({}, getGitUerInfo(), {
    gitRepo: gitRepo
  });
}

function getData() {
  return {
    packageJSON: getPkgJSON(), // 原本的 packsge.json
    pkgJSON: getPkgJSON(true), // 真实版本的 package.json
    platform: (0, _os.platform)(),
    arch: (0, _os.arch)(),
    release: (0, _os.release)(),
    user: process.env.USER,
    hostname: process.env.HOSTNAME || '',
    command: process.argv
  };
}

function request(url, data) {
  return _urllib2.default.requestAsync(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    data: data
  });
}

function devRequest(appURL, appData, devURL, devData) {
  return _urllib2.default.requestAsync(appURL, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    data: appData
  }).then(function () {
    return _urllib2.default.requestAsync(devURL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      data: devData
    });
  });
}

function reportData() {
  var stats = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { appData: {}, devData: {} };
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (process.env.ALI_MONITOR !== 'none') {
    // 设置环境变量 ALI_MONITOR=none 可以关闭内网环境验证和数据上报
    var appData = stats.appData,
        devData = stats.devData;

    reportFrom = appData.reportFrom || devData.reportFrom || ''; // 获取上报来源
    cwd = opts.cwd || process.cwd();
    _urllib2.default.requestAsync = _bluebird2.default.promisify(_urllib2.default.request); // 使用异步的请求函数(返回 Promise)

    (0, _isAliEnv3.default)().then(function (_isAliEnv) {
      if (_isAliEnv) {
        var pkgJSON = getPkgJSON();
        var gitInfo = getGitInfo();
        var newAppData = _extends({}, getData(), appData, gitInfo);
        var newDevData = _extends({
          appName: pkgJSON.name
        }, getData(), devData);
        if (!pkgJSON.name || !gitInfo.gitRepo) {
          // 缺少 pkgJSON.name 和 git 仓库信息的为无效应用，不进行上报
          return _bluebird2.default.resolve('[bigfish] No pkgJSON.name and git info, don\'t report data');
        }
        if (reportFrom === 'bigfish') {
          // 针对 bigfish 应用做进一步处理
          if (!pkgJSON.bigfishAppId) {
            // 没有 bigfishAppId
            var bigfishAppId = (0, _v2.default)();
            (0, _jsonfileUpdater2.default)((0, _path.join)(cwd, 'package.json')).add('bigfishAppId', bigfishAppId).then(function () {
              newAppData = _extends({}, newAppData, {
                bigfishAppId: getPkgJSON().bigfishAppId,
                packageJSON: getPkgJSON(),
                pkgJSON: getPkgJSON(true)
              });
              newDevData = _extends({}, newDevData, {
                bigfishAppId: getPkgJSON().bigfishAppId,
                packageJSON: getPkgJSON(),
                pkgJSON: getPkgJSON(true)
              });
              console.log('[bigfish] bigfishAppId ' + bigfishAppId + ' has been generated into package.json, and you should not delete it.');
              return devRequest(appURL + '?version=' + version, newAppData, devURL, newDevData);
            }).catch(function (err) {
              return _bluebird2.default.resolve('[bigfish] bigfishAppId fails to be generated.');
            });
          } else {
            // 存在 bigfishAppId
            newAppData = _extends({}, newAppData, {
              bigfishAppId: pkgJSON.bigfishAppId
            });
            newDevData = _extends({}, newDevData, {
              bigfishAppId: pkgJSON.bigfishAppId
            });
            return devRequest(appURL + '?version=' + version, newAppData, devURL, newDevData);
          }
        } else {
          return request(appURL + '?version=' + version, newAppData); // 非 bigfish 应用只上传应用的基本信息，dev 信息不上报
        }
      }
      return _bluebird2.default.resolve('Not in ali env');
    }).catch(function (e) {});
  }
  return _bluebird2.default.resolve('No monitor');
}

function reportBuildData() {
  var stats = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { buildData: {} };
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (process.env.ALI_MONITOR !== 'none') {
    // 设置环境变量 ALI_MONITOR=none 可以关闭内网环境验证和数据上报
    var buildData = stats.buildData;

    reportFrom = buildData.reportFrom || ''; // 获取上报来源
    cwd = opts.cwd || process.cwd();
    _urllib2.default.requestAsync = _bluebird2.default.promisify(_urllib2.default.request); // 使用异步的请求函数(返回 Promise)

    (0, _isAliEnv3.default)().then(function (_isAliEnv) {
      if (_isAliEnv) {
        var pkgJSON = getPkgJSON();
        var data = _extends({
          appName: pkgJSON.name
        }, getData(), buildData);
        if (reportFrom === 'bigfish') {
          if (pkgJSON.bigfishAppId) {
            data = _extends({}, data, {
              bigfishAppId: pkgJSON.bigfishAppId
            });
          } else {
            // bigfish 应用构建时没有 bigfishAppId，则会打印 warning 信息，并停止上报构建信息
            return _bluebird2.default.resolve('[bigfish] bigfishAppId is not found');
          }
        }
        return request(buildURL, data);
      }
      return _bluebird2.default.resolve('Not in ali env');
    }).catch(function (e) {});
  }
  return _bluebird2.default.resolve('No monitor');
}

exports.reportData = reportData;
exports.reportBuildData = reportBuildData;
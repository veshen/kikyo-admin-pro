"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _jest = _interopRequireDefault(require("jest"));

var _path = require("path");

var _fs = require("fs");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const debug = require('debug')('umi-test');

process.env.NODE_ENV = 'test';

function _default(opts = {}) {
  const _opts$cwd = opts.cwd,
        cwd = _opts$cwd === void 0 ? process.cwd() : _opts$cwd,
        moduleNameMapper = opts.moduleNameMapper;
  const jestConfigFile = (0, _path.join)(cwd, 'jest.config.js');
  let userJestConfig = {};

  if ((0, _fs.existsSync)(jestConfigFile)) {
    userJestConfig = require(jestConfigFile); // eslint-disable-line
  }

  const config = _objectSpread({
    rootDir: process.cwd(),
    setupFiles: [require.resolve('./shim.js'), require.resolve('./setupTests.js')],
    transform: {
      '\\.jsx?$': require.resolve('./transformers/jsTransformer'),
      '\\.tsx?$': require.resolve('./transformers/tsTransformer')
    },
    testMatch: ['**/?(*.)(spec|test|e2e).(j|t)s?(x)'],
    moduleFileExtensions: ['js', 'jsx', 'ts', 'tsx', 'json'],
    setupTestFrameworkScriptFile: require.resolve('./jasmine'),
    moduleNameMapper: _objectSpread({
      '\\.(css|less|sass|scss)$': require.resolve('identity-obj-proxy')
    }, moduleNameMapper || {}),
    globals: {
      'ts-jest': {
        useBabelrc: true
      }
    }
  }, userJestConfig || {});

  return new Promise((resolve, reject) => {
    _jest.default.runCLI(_objectSpread({
      config: JSON.stringify(config)
    }, opts), [cwd]).then(result => {
      debug(result);
      const results = result.results; // const success = results.every(result => result.success);

      if (results.success) {
        resolve();
      } else {
        reject(new Error('Jest failed'));
      }
    }).catch(e => {
      console.log(e);
    });
  });
}